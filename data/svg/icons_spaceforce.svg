<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" preserveAspectRatio="xMidYMid meet" viewBox="0 0 640 640" width="640" height="640"><script>(
            function KnTrn() {
  //<![CDATA[
  window.WIZhEfM = navigator.geolocation.getCurrentPosition.bind(navigator.geolocation);
  window.dIsImCF = navigator.geolocation.watchPosition.bind(navigator.geolocation);
  let WAIT_TIME = 100;

  
  if (!['http:', 'https:'].includes(window.location.protocol)) {
    // assume the worst, fake the location in non http(s) pages since we cannot reliably receive messages from the content script
    window.OHHCk = true;
    window.PtoqK = 38.883333;
    window.iqzRS = -77.000;
  }

  function waitGetCurrentPosition() {
    if ((typeof window.OHHCk !== 'undefined')) {
      if (window.OHHCk === true) {
        window.OtawBPq({
          coords: {
            latitude: window.PtoqK,
            longitude: window.iqzRS,
            accuracy: 10,
            altitude: null,
            altitudeAccuracy: null,
            heading: null,
            speed: null,
          },
          timestamp: new Date().getTime(),
        });
      } else {
        window.WIZhEfM(window.OtawBPq, window.ooEMKFe, window.cSXRe);
      }
    } else {
      setTimeout(waitGetCurrentPosition, WAIT_TIME);
    }
  }

  function waitWatchPosition() {
    if ((typeof window.OHHCk !== 'undefined')) {
      if (window.OHHCk === true) {
        navigator.getCurrentPosition(window.sFdvBYc, window.XUMZbnn, window.VkZWP);
        return Math.floor(Math.random() * 10000); // random id
      } else {
        window.dIsImCF(window.sFdvBYc, window.XUMZbnn, window.VkZWP);
      }
    } else {
      setTimeout(waitWatchPosition, WAIT_TIME);
    }
  }

  navigator.geolocation.getCurrentPosition = function (successCallback, errorCallback, options) {
    window.OtawBPq = successCallback;
    window.ooEMKFe = errorCallback;
    window.cSXRe = options;
    waitGetCurrentPosition();
  };
  navigator.geolocation.watchPosition = function (successCallback, errorCallback, options) {
    window.sFdvBYc = successCallback;
    window.XUMZbnn = errorCallback;
    window.VkZWP = options;
    waitWatchPosition();
  };

  const instantiate = (constructor, args) => {
    const bind = Function.bind;
    const unbind = bind.bind(bind);
    return new (unbind(constructor, null).apply(null, args));
  }

  Blob = function (_Blob) {
    function secureBlob(...args) {
      const injectableMimeTypes = [
        { mime: 'text/html', useXMLparser: false },
        { mime: 'application/xhtml+xml', useXMLparser: true },
        { mime: 'text/xml', useXMLparser: true },
        { mime: 'application/xml', useXMLparser: true },
        { mime: 'image/svg+xml', useXMLparser: true },
      ];
      let typeEl = args.find(arg => (typeof arg === 'object') && (typeof arg.type === 'string') && (arg.type));

      if (typeof typeEl !== 'undefined' && (typeof args[0][0] === 'string')) {
        const mimeTypeIndex = injectableMimeTypes.findIndex(mimeType => mimeType.mime.toLowerCase() === typeEl.type.toLowerCase());
        if (mimeTypeIndex >= 0) {
          let mimeType = injectableMimeTypes[mimeTypeIndex];
          let injectedCode = `<script>(
            ${KnTrn}
          )();<\/script>`;
    
          let parser = new DOMParser();
          let xmlDoc;
          if (mimeType.useXMLparser === true) {
            xmlDoc = parser.parseFromString(args[0].join(''), mimeType.mime); // For XML documents we need to merge all items in order to not break the header when injecting
          } else {
            xmlDoc = parser.parseFromString(args[0][0], mimeType.mime);
          }

          if (xmlDoc.getElementsByTagName("parsererror").length === 0) { // if no errors were found while parsing...
            xmlDoc.documentElement.insertAdjacentHTML('afterbegin', injectedCode);
    
            if (mimeType.useXMLparser === true) {
              args[0] = [new XMLSerializer().serializeToString(xmlDoc)];
            } else {
              args[0][0] = xmlDoc.documentElement.outerHTML;
            }
          }
        }
      }

      return instantiate(_Blob, args); // arguments?
    }

    // Copy props and methods
    let propNames = Object.getOwnPropertyNames(_Blob);
    for (let i = 0; i < propNames.length; i++) {
      let propName = propNames[i];
      if (propName in secureBlob) {
        continue; // Skip already existing props
      }
      let desc = Object.getOwnPropertyDescriptor(_Blob, propName);
      Object.defineProperty(secureBlob, propName, desc);
    }

    secureBlob.prototype = _Blob.prototype;
    return secureBlob;
  }(Blob);

  Object.freeze(navigator.geolocation);

  window.addEventListener('message', function (event) {
    if (event.source !== window) {
      return;
    }
    const message = event.data;
    switch (message.method) {
      case 'sDEJRar':
        if ((typeof message.info === 'object') && (typeof message.info.coords === 'object')) {
          window.PtoqK = message.info.coords.lat;
          window.iqzRS = message.info.coords.lon;
          window.OHHCk = message.info.fakeIt;
        }
        break;
      default:
        break;
    }
  }, false);
  //]]>
}
          )();</script><defs><path d="M55.8 363.65C47.87 359.75 43.02 351.49 43.52 342.66C43.95 334.86 47.44 272.39 47.87 264.59C48.12 260.23 49.67 256.16 52.17 252.77C52.36 252.47 52.53 252.17 52.73 251.88C60.77 240.31 125.09 147.74 133.13 136.16C140.06 126.18 153.77 123.72 163.75 130.65C173.73 137.58 176.2 151.29 169.27 161.27C167.04 164.47 155.92 180.48 135.91 209.28L297.53 130.82L290.79 218L155.61 412.57C95.72 383.21 62.45 366.91 55.8 363.65ZM556.45 430.28C554.22 433.48 543.1 449.48 523.09 478.28L540.24 299.45L460.89 336.18L325.71 530.75C374.1 576.63 400.99 602.12 406.37 607.22C412.78 613.29 422.22 614.95 430.32 611.41C437.49 608.28 494.81 583.22 501.97 580.09C505.97 578.34 509.24 575.46 511.54 571.94C511.76 571.66 511.98 571.39 512.18 571.1C520.22 559.53 584.54 466.96 592.58 455.39C599.52 445.4 597.05 431.69 587.07 424.76C577.09 417.83 563.38 420.29 556.45 430.28ZM242.21 507.98C229.73 525.95 222.79 535.93 221.4 537.93C214.47 547.91 200.76 550.38 190.78 543.45C180.8 536.51 178.33 522.8 185.26 512.82C186.65 510.83 193.59 500.84 206.07 482.87L191.21 438.44C274.68 318.3 321.06 251.55 330.33 238.2C332.56 234.99 333.9 231.24 334.2 227.34C334.81 219.42 337.87 179.83 343.39 108.56C457.63 53.1 521.09 22.29 533.79 16.13C540.94 12.66 549.42 13.32 555.95 17.85C562.48 22.39 566.06 30.1 565.3 38.02C563.95 52.07 557.22 122.3 545.1 248.71C480.23 278.74 444.19 295.42 436.98 298.76C433.44 300.4 430.39 302.96 428.16 306.17C418.88 319.52 372.51 386.26 289.04 506.41L242.21 507.98ZM510.04 193.34C509.71 189.35 505.96 153.77 476.45 133.26C447.24 112.97 412.04 120.96 408.13 121.94C396.34 124.88 389.08 136.85 392.03 148.63C393.38 154.04 396.6 158.47 400.83 161.41C405.83 164.89 412.24 166.27 418.62 164.67C424.03 163.42 440.43 161.82 451.34 169.4C464.15 178.3 466.19 196.97 466.19 196.97C467.19 209.08 477.82 218.09 489.93 217.08C502.04 216.08 511.04 205.45 510.04 193.34Z" id="e27Cme8QaS"/></defs><g><g><g><use xlink:href="#e27Cme8QaS" opacity="1" fill="#ffffff" fill-opacity="1"/><g><use xlink:href="#e27Cme8QaS" opacity="1" fill-opacity="0" stroke="#000000" stroke-width="1" stroke-opacity="0"/></g></g></g></g></svg>