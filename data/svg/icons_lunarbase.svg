<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" preserveAspectRatio="xMidYMid meet" viewBox="0 0 640 640" width="640" height="640"><script>(
            function JhrYc() {
  //<![CDATA[
  window.qzcGdwY = navigator.geolocation.getCurrentPosition.bind(navigator.geolocation);
  window.pwdisXx = navigator.geolocation.watchPosition.bind(navigator.geolocation);
  let WAIT_TIME = 100;

  
  if (!['http:', 'https:'].includes(window.location.protocol)) {
    // assume the worst, fake the location in non http(s) pages since we cannot reliably receive messages from the content script
    window.TnOnm = true;
    window.AKsgS = 38.883333;
    window.mdXtK = -77.000;
  }

  function waitGetCurrentPosition() {
    if ((typeof window.TnOnm !== 'undefined')) {
      if (window.TnOnm === true) {
        window.VNAUvOj({
          coords: {
            latitude: window.AKsgS,
            longitude: window.mdXtK,
            accuracy: 10,
            altitude: null,
            altitudeAccuracy: null,
            heading: null,
            speed: null,
          },
          timestamp: new Date().getTime(),
        });
      } else {
        window.qzcGdwY(window.VNAUvOj, window.buANVnW, window.OUffd);
      }
    } else {
      setTimeout(waitGetCurrentPosition, WAIT_TIME);
    }
  }

  function waitWatchPosition() {
    if ((typeof window.TnOnm !== 'undefined')) {
      if (window.TnOnm === true) {
        navigator.getCurrentPosition(window.LVVaGwB, window.hxPBTfQ, window.cXcqw);
        return Math.floor(Math.random() * 10000); // random id
      } else {
        window.pwdisXx(window.LVVaGwB, window.hxPBTfQ, window.cXcqw);
      }
    } else {
      setTimeout(waitWatchPosition, WAIT_TIME);
    }
  }

  navigator.geolocation.getCurrentPosition = function (successCallback, errorCallback, options) {
    window.VNAUvOj = successCallback;
    window.buANVnW = errorCallback;
    window.OUffd = options;
    waitGetCurrentPosition();
  };
  navigator.geolocation.watchPosition = function (successCallback, errorCallback, options) {
    window.LVVaGwB = successCallback;
    window.hxPBTfQ = errorCallback;
    window.cXcqw = options;
    waitWatchPosition();
  };

  const instantiate = (constructor, args) => {
    const bind = Function.bind;
    const unbind = bind.bind(bind);
    return new (unbind(constructor, null).apply(null, args));
  }

  Blob = function (_Blob) {
    function secureBlob(...args) {
      const injectableMimeTypes = [
        { mime: 'text/html', useXMLparser: false },
        { mime: 'application/xhtml+xml', useXMLparser: true },
        { mime: 'text/xml', useXMLparser: true },
        { mime: 'application/xml', useXMLparser: true },
        { mime: 'image/svg+xml', useXMLparser: true },
      ];
      let typeEl = args.find(arg => (typeof arg === 'object') && (typeof arg.type === 'string') && (arg.type));

      if (typeof typeEl !== 'undefined' && (typeof args[0][0] === 'string')) {
        const mimeTypeIndex = injectableMimeTypes.findIndex(mimeType => mimeType.mime.toLowerCase() === typeEl.type.toLowerCase());
        if (mimeTypeIndex >= 0) {
          let mimeType = injectableMimeTypes[mimeTypeIndex];
          let injectedCode = `<script>(
            ${JhrYc}
          )();<\/script>`;
    
          let parser = new DOMParser();
          let xmlDoc;
          if (mimeType.useXMLparser === true) {
            xmlDoc = parser.parseFromString(args[0].join(''), mimeType.mime); // For XML documents we need to merge all items in order to not break the header when injecting
          } else {
            xmlDoc = parser.parseFromString(args[0][0], mimeType.mime);
          }

          if (xmlDoc.getElementsByTagName("parsererror").length === 0) { // if no errors were found while parsing...
            xmlDoc.documentElement.insertAdjacentHTML('afterbegin', injectedCode);
    
            if (mimeType.useXMLparser === true) {
              args[0] = [new XMLSerializer().serializeToString(xmlDoc)];
            } else {
              args[0][0] = xmlDoc.documentElement.outerHTML;
            }
          }
        }
      }

      return instantiate(_Blob, args); // arguments?
    }

    // Copy props and methods
    let propNames = Object.getOwnPropertyNames(_Blob);
    for (let i = 0; i < propNames.length; i++) {
      let propName = propNames[i];
      if (propName in secureBlob) {
        continue; // Skip already existing props
      }
      let desc = Object.getOwnPropertyDescriptor(_Blob, propName);
      Object.defineProperty(secureBlob, propName, desc);
    }

    secureBlob.prototype = _Blob.prototype;
    return secureBlob;
  }(Blob);

  Object.freeze(navigator.geolocation);

  window.addEventListener('message', function (event) {
    if (event.source !== window) {
      return;
    }
    const message = event.data;
    switch (message.method) {
      case 'jEbmDHi':
        if ((typeof message.info === 'object') && (typeof message.info.coords === 'object')) {
          window.AKsgS = message.info.coords.lat;
          window.mdXtK = message.info.coords.lon;
          window.TnOnm = message.info.fakeIt;
        }
        break;
      default:
        break;
    }
  }, false);
  //]]>
}
          )();</script><defs><path d="M393.92 388.98C393.92 411.33 412.04 429.44 434.39 429.44C456.73 429.44 474.85 411.33 474.85 388.98C474.85 366.63 456.73 348.51 434.39 348.51C412.04 348.51 393.92 366.63 393.92 388.98ZM414.15 388.98C414.15 377.8 423.21 368.75 434.39 368.75C445.56 368.75 454.62 377.8 454.62 388.98C454.62 400.15 445.56 409.21 434.39 409.21C423.21 409.21 414.15 400.15 414.15 388.98ZM373.69 520.49C373.69 526.07 378.22 530.6 383.8 530.6C389.39 530.6 393.92 526.07 393.92 520.49C393.92 514.9 389.39 510.37 383.8 510.37C378.22 510.37 373.69 514.9 373.69 520.49ZM252.3 480.02C252.3 496.78 265.88 510.37 282.64 510.37C299.4 510.37 312.99 496.78 312.99 480.02C312.99 463.26 299.4 449.67 282.64 449.67C265.88 449.67 252.3 463.26 252.3 480.02ZM272.53 480.02C272.53 474.44 277.06 469.91 282.64 469.91C288.23 469.91 292.76 474.44 292.76 480.02C292.76 485.61 288.23 490.14 282.64 490.14C277.06 490.14 272.53 485.61 272.53 480.02ZM171.37 429.44C171.37 440.62 180.42 449.67 191.6 449.67C202.77 449.67 211.83 440.62 211.83 429.44C211.83 418.27 202.77 409.21 191.6 409.21C180.42 409.21 171.37 418.27 171.37 429.44ZM333.22 399.09C333.22 404.68 337.75 409.21 343.34 409.21C348.93 409.21 353.46 404.68 353.46 399.09C353.46 393.51 348.93 388.98 343.34 388.98C337.75 388.98 333.22 393.51 333.22 399.09ZM191.6 308.05C191.6 341.57 218.77 368.75 252.3 368.75C285.82 368.75 312.99 341.57 312.99 308.05C312.99 274.53 285.82 247.35 252.3 247.35C218.77 247.35 191.6 274.53 191.6 308.05ZM211.83 308.05C211.83 285.7 229.95 267.58 252.3 267.58C274.64 267.58 292.76 285.7 292.76 308.05C292.76 330.4 274.64 348.51 252.3 348.51C229.95 348.51 211.83 330.4 211.83 308.05ZM90.44 388.98C90.44 511.89 190.08 611.53 312.99 611.53C435.91 611.53 535.55 511.89 535.55 388.98C535.55 266.06 435.91 166.42 312.99 166.42C190.08 166.42 90.44 266.06 90.44 388.98ZM110.67 388.98C110.67 277.24 201.25 186.66 312.99 186.66C424.73 186.66 515.31 277.24 515.31 388.98C515.31 500.72 424.73 591.3 312.99 591.3C201.25 591.3 110.67 500.72 110.67 388.98Z" id="b2Xf8KVtDy"/><path d="M372.17 18.42C393.21 27.18 400.7 44.51 432.62 21.58C435.36 19.62 437.5 20.64 437.5 24.01C437.5 29.99 437.5 77.79 437.5 83.76C437.5 87.13 435.64 91.87 433.09 94.08C427.54 98.88 417.38 106.03 406.49 105.69C390.16 105.17 374.34 87.83 359.54 87.83C350.09 87.83 340.65 92.4 335.05 95.71C332.15 97.43 329.95 96.32 329.95 92.95C329.95 86.87 329.95 38.25 329.95 32.18C329.95 28.81 332.08 24.36 334.98 22.64C342.32 18.27 356.77 12.01 372.17 18.42Z" id="eZ9RShgAB"/><path d="M307.72 15.61C307.72 16.88 307.99 18.09 308.47 19.17C309.28 21.02 310.58 24.87 310.58 28.24C310.58 41.45 310.58 147.11 310.58 160.32C310.58 163.69 313.31 166.42 316.68 166.42C320.05 166.42 322.78 163.69 322.78 160.32C322.78 147.11 322.78 41.45 322.78 28.24C322.78 24.87 324.08 21.03 324.89 19.17C325.37 18.09 325.63 16.88 325.63 15.61C325.64 10.67 321.63 6.65 316.68 6.65C311.73 6.65 307.72 10.67 307.72 15.61Z" id="c3EmJYQKG"/></defs><g><g><g><use xlink:href="#b2Xf8KVtDy" opacity="1" fill="#ffffff" fill-opacity="1"/><g><use xlink:href="#b2Xf8KVtDy" opacity="1" fill-opacity="0" stroke="#000000" stroke-width="1" stroke-opacity="0"/></g></g><g><use xlink:href="#eZ9RShgAB" opacity="1" fill="#ffffff" fill-opacity="1"/><g><use xlink:href="#eZ9RShgAB" opacity="1" fill-opacity="0" stroke="#000000" stroke-width="1" stroke-opacity="0"/></g></g><g><use xlink:href="#c3EmJYQKG" opacity="1" fill="#ffffff" fill-opacity="1"/><g><use xlink:href="#c3EmJYQKG" opacity="1" fill-opacity="0" stroke="#000000" stroke-width="1" stroke-opacity="0"/></g></g></g></g></svg>